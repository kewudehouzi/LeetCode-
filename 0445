//数据太长，直接硬加会超限
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        string s1,s2;
        ListNode* t1=l1,*t2=l2,*p,*head;
        if(t1==NULL&&t2==NULL) return NULL;
        while(t1!=NULL){
            char c=t1->val+'0';
            s1=s1+c;
            t1=t1->next;
        }
        while(t2!=NULL){
            char c=t2->val+'0';
            s2=s2+c;
            t2=t2->next;
        }
        int s=stoi(s1)+stoi(s2);
        head=new ListNode;
        head->val=s%10;s=s/10;head->next=NULL;
        while(s!=0){
            p=new ListNode ;
            p->val=s%10;s=s/10;
            p->next=head;
            head=p;
        }
        return head;
    }
    
    /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public://利用栈逆置链表
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
        stack<int> s1,s2;
        while(l1!=NULL){
            s1.push(l1->val);
            l1=l1->next;
        }
        while(l2!=NULL){
            s2.push(l2->val);
            l2=l2->next;
        }
        int carry=0;
        ListNode* head=NULL,* p=NULL;
        while(!s1.empty()||!s2.empty()||carry!=0){
            int t1=s1.empty()==1?0:s1.top();
            int t2=s2.empty()==1?0:s2.top();
            if(s1.empty()!=1) s1.pop();
            if(s2.empty()!=1) s2.pop();
            int temp=(t1+t2+carry)%10;
            carry=(t1+t2+carry)/10;
            p=new ListNode;p->val=temp;
            p->next=head;
            head=p;
        }
        return head;
    }
};
