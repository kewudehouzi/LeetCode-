class Solution {
public:
    //dfs+记忆化搜索
    int v[4]={25,10,5,1};//顺序不能变，否则会栈溢出
    long long dp[1000010][5]={0};
    int waysToChange(int n) {
        return dfs(n,0);
    }
    int dfs(int n,int cur){//表示组成面值n的方法数，cur表示当前选择硬币的序号
        if(n==0) return 1;
        if(n>0&&dp[n][cur]!=0) return dp[n][cur];
        long long ans=0;
        for(int i=cur;i<4;i++){
            if(n-v[i]>=0){
                if(dp[n-v[i]][i]!=0) ans+=dp[n-v[i]][i];
                else ans+=dfs(n-v[i],i);
            }
        }
        dp[n][cur]=ans;
        return ans%1000000007;
    }
    
    
    //动态规划解法
    int v[4]={1,5,10,25};//顺序也不能改变
    int dp[5][1000010]={0};//dp[i][j]  i种硬币构成价值j的方法数
    int waysToChange(int n) {
        //n=n+5;
        for(int i=0;i<4;i++) dp[i][0]=1;
        for(int i=0;i<=n;i++) dp[0][i]=1;//只用1元硬币，对任何值都至少有一种组成方法
        for(int i=1;i<4;i++){
            for(int j=1;j<=n;j++){
                if(j<v[i]) dp[i][j]=dp[i-1][j];
                else dp[i][j]=(dp[i-1][j]+dp[i][j-v[i]])%1000000007;
            }
        }
        return dp[3][n];
    }
};
