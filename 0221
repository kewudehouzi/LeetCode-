class Solution {
public:
/*当我们判断以某个点为正方形右下角时最大的正方形时，那它的上方，左方和左上方三个点也一定是某个正方形的右下角，否则该点为右下角的
正方形最大就是它自己了。这是定性的判断，那具体的最大正方形边长呢？我们知道，该点为右下角的正方形的最大边长，最多比它的上方，左方
和左上方为右下角的正方形的边长多1，最好的情况是是它的上方，左方和左上方为右下角的正方形的大小都一样的，这样加上该点就可以构成一个
更大的正方形。 但如果它的上方，左方和左上方为右下角的正方形的大小不一样，合起来就会缺了某个角落，这时候只能取那三个正方形中最小的
正方形的边长加1了。
假设dpi表示以i,j为右下角的正方形的最大边长，则有 dp[i][j] = min(dp[i-1][j-1], dp[i-1][j], dp[i][j-1]) + 1 
当然，如果这个点在原矩阵中本身就是0的话，那dp[i]肯定就是0了。*/
    int maximalSquare(vector<vector<char>>& matrix) {
        int m=matrix.size();
        if(m==0) return 0;
        int n=matrix[0].size();
        int ans=0;
        vector<vector<int>> dp(m,vector<int>(n,0));
        for(int i=0;i<m;i++){//第一列
            if(matrix[i][0]=='1'){
                ans=1;dp[i][0]=1;
            }
            else
               dp[i][0]=0;
        }
        for(int i=0;i<n;i++){//第一行
            if(matrix[0][i]=='1'){
                ans=1;dp[0][i]=1;
            }
            else
               dp[0][i]=0;
        }
        for(int i=1;i<m;i++){
           for(int j=1;j<n;j++){
               if(matrix[i][j]=='1'){
                   int t1=dp[i-1][j-1];
                   int t2=dp[i-1][j];
                   int t3=dp[i][j-1];
                   dp[i][j]=1+min(t1,min(t2,t3));
                   ans=max(dp[i][j],ans);
               }
               else
                    dp[i][j]=0;
           } 
        }
        return ans*ans;
    }
};
