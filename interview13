class Solution {
public:
    int judge(int i,int j){
        int sum=0;
        while(i!=0){
            sum+=i%10;
            i=i/10;
        }
        while(j!=0){
            sum+=j%10;
            j=j/10;
        }
        return sum;
    }
    struct node{
        int i,j;
    };
    //int vis[m][n]={0};
    int movingCount(int m, int n, int k) {
        vector<vector<int>> vis(m,vector<int> (n,0));
        int sum=0;
        int x[4]={1,-1,0,0},y[4]={0,0,1,-1};
        node no;no.i=0;no.j=0;
        queue<node> q;q.push(no);
        vis[0][0]=1;
        while(!q.empty()){
            node now=q.front();
            q.pop();sum++;
            for(int i=0;i<4;i++){
                int nx=x[i]+now.i,ny=y[i]+now.j;
                if(nx>=0&&nx<m&&ny>=0&&ny<n&&judge(nx,ny)<=k&&vis[nx][ny]==0){
                    vis[nx][ny]=1;
                    node t;t.i=nx;t.j=ny;
                    q.push(t);
                    //sum++;
                }
            }
        }
        return sum;
    }
};
